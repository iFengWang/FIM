[{"/Users/feng/Work/Project/df/df.im/df.im.client/src/index.js":"1","/Users/feng/Work/Project/df/df.im/df.im.client/src/reportWebVitals.js":"2","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/im.js":"3","/Users/feng/Work/Project/df/df.im/df.im.client/src/contexts/imSocket.js":"4","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imStore.js":"5","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imChat.js":"6","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imThemeContext.js":"7","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imMain.js":"8","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imMin.js":"9","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imHelp.js":"10","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imSetting.js":"11","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imApi.js":"12","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imCore.js":"13","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/VideoInviteContainer.js":"14","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/VideoInviteDialog.js":"15","/Users/feng/Work/Project/df/df.im/df.im.client/src/services/webrtc.js":"16"},{"size":796,"mtime":1754813611025,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1666765780000,"results":"19","hashOfConfig":"18"},{"size":2777,"mtime":1759141220330,"results":"20","hashOfConfig":"18"},{"size":11373,"mtime":1759148987122,"results":"21","hashOfConfig":"18"},{"size":4015,"mtime":1759141220087,"results":"22","hashOfConfig":"18"},{"size":24489,"mtime":1759235151791,"results":"23","hashOfConfig":"18"},{"size":719,"mtime":1739533162671,"results":"24","hashOfConfig":"18"},{"size":5239,"mtime":1759138522078,"results":"25","hashOfConfig":"18"},{"size":1332,"mtime":1759138522078,"results":"26","hashOfConfig":"18"},{"size":5025,"mtime":1674995540000,"results":"27","hashOfConfig":"18"},{"size":3567,"mtime":1739536841227,"results":"28","hashOfConfig":"18"},{"size":1372,"mtime":1758980900307,"results":"29","hashOfConfig":"18"},{"size":2144,"mtime":1739533162669,"results":"30","hashOfConfig":"18"},{"size":1187,"mtime":1759154283611,"results":"31","hashOfConfig":"18"},{"size":528,"mtime":1759203210674,"results":"32","hashOfConfig":"18"},{"size":3092,"mtime":1759151821519,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c0p2yt",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/feng/Work/Project/df/df.im/df.im.client/src/index.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/reportWebVitals.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/im.js",["88"],[],"import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  showMain,\n  showSetting,\n  showChat,\n  togglerMain,\n  resize,\n  togglerSetting,\n  togglerChat,\n  showHelp,\n  togglerHelp,\n  getUsers,\n} from \"./imStore\";\nimport ImMin from \"./imMin\";\nimport ImMain from \"./imMain\";\nimport ImSetting from \"./imSetting\";\nimport ImChat from \"./imChat\";\nimport ImHelp from \"./imHelp\";\nimport \"./im.css\";\nimport { ThemeContext, Themes } from \"./imThemeContext\";\nimport VideoInviteContainer from \"./VideoInviteContainer\";\nimport { useSocket } from \"../contexts/imSocket\";\n// import { users } from \"./imConsts\";\n\nfunction Im(props) {\n  const { socket } = useSocket();\n\n  const isShowMain = useSelector(showMain);\n  const isShowSetting = useSelector(showSetting);\n  const isShowChat = useSelector(showChat);\n  const isShowHelp = useSelector(showHelp);\n\n  const dispatch = useDispatch();\n  const reFrame = () => dispatch(resize());\n\n  const onKeyDown = (evt) => {\n    // enter : 发送消息\n    // if (evt.key === \"Enter\") {\n    // }\n    // ctrl+alt+m : 切换最小化\n    if (evt.ctrlKey && evt.altKey && evt.keyCode === 77) {\n      dispatch(togglerMain());\n    }\n\n    // ctrl+alt+c : 切换chat对话框\n    if (evt.ctrlKey && evt.altKey && evt.keyCode === 67) {\n      dispatch(togglerChat());\n    }\n\n    // ctrl+alt+f : 切换全屏\n    // if (evt.ctrlKey && evt.altKey && evt.keyCode === 70) {\n    //   dispatch(togglerChat());\n    // }\n\n    // ctrl+alt+s : 切换设置\n    if (evt.ctrlKey && evt.altKey && evt.keyCode === 83) {\n      dispatch(togglerSetting());\n    }\n\n    // ctrl+alt+h : 切换帮助\n    if (evt.ctrlKey && evt.altKey && evt.keyCode === 72) {\n      dispatch(togglerHelp());\n    }\n  };\n\n  useEffect(() => {\n    if (!socket) return;\n    dispatch(getUsers());\n\n    const handleUserDisconnected = (event) => {\n      const offLineUsers = event.detail;\n      console.log(\"User disconnected:\", offLineUsers);\n      // 重新获取用户列表\n      dispatch(getUsers());\n    };\n\n    window.addEventListener(\"resize\", reFrame);\n    window.addEventListener(\"keydown\", onKeyDown);\n    window.addEventListener(\"user_disconnected\", handleUserDisconnected);\n\n    // 清理函数\n    return () => {\n      window.removeEventListener(\"resize\", reFrame);\n      window.removeEventListener(\"keydown\", onKeyDown);\n      window.removeEventListener(\"user_disconnected\", handleUserDisconnected);\n    };\n  }, [socket, dispatch]);\n\n  return (\n    <ThemeContext.Provider value={Themes.red}>\n      <VideoInviteContainer />\n      {isShowMain ? <ImMain /> : <ImMin />}\n      {isShowSetting ? <ImSetting /> : null}\n      {isShowChat ? <ImChat /> : null}\n      {isShowHelp ? <ImHelp /> : null}\n    </ThemeContext.Provider>\n  );\n}\n\nexport default Im;\n","/Users/feng/Work/Project/df/df.im/df.im.client/src/contexts/imSocket.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imStore.js",["89"],[],"import {\n  createAsyncThunk,\n  createSlice,\n  configureStore,\n  combineReducers,\n} from \"@reduxjs/toolkit\";\nimport { getUserList } from \"./imApi\";\n\nconst initialState = {\n  showMain: false,\n  showSetting: false,\n  showChat: false,\n  showHelp: false,\n  size: {\n    left: 0,\n    top: 0,\n    right: window.innerWidth - 20 - 40,\n    bottom: window.innerHeight - 20 - 40,\n  },\n  status: \"idle\",\n  zIndex: 9999,\n  users: [],\n  currentChatUser: null, // 添加当前聊天用户信息\n  onlineUsers: {}, // 在线用户状态\n  unreadMessages: {}, // 未读消息计数\n  incomingCall: null, // 收到的视频邀请\n};\n\nexport const getUsers = createAsyncThunk(\n  \"imReducer/getUsers\",\n  async (params, { dispatch }) => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const uid = urlParams.get(\"uId\");\n    console.log(\"Getting users for uid:\", uid);\n    const response = await getUserList(parseInt(uid));\n    return response.data;\n  }\n);\n\nconst imSlice = createSlice({\n  name: \"imReducer\", // 生成的action名中会包含此前缀\n  initialState,\n  reducers: {\n    togglerMain: (state) => {\n      // action name : 'imReducer/togglerMain'\n      state.showMain = !state.showMain;\n    },\n    resize: (state) => {\n      state.size.right = window.innerWidth - 20;\n      state.size.bottom = window.innerHeight - 20;\n    },\n    togglerSetting: (state) => {\n      state.showSetting = !state.showSetting;\n    },\n    togglerChat: (state, action) => {\n      if (action.payload) {\n        // 如果提供了用户信息，说明是要打开或切换聊天\n        state.showChat = true;\n        state.currentChatUser = action.payload;\n      } else {\n        // 如果没有提供用户信息，说明是要关闭聊天窗口\n        state.showChat = false;\n        state.currentChatUser = null;\n      }\n    },\n    togglerHelp: (state) => {\n      state.showHelp = !state.showHelp;\n    },\n    incrementzIndex: (state) => {\n      state.zIndex += 1;\n    },\n    updateUserStatus: (state, action) => {\n      state.onlineUsers[action.payload.uid] = action.payload.online;\n    },\n    addUnreadMessage: (state, action) => {\n      const { fromUid } = action.payload;\n      if (!state.unreadMessages[fromUid]) {\n        state.unreadMessages[fromUid] = 0;\n      }\n      state.unreadMessages[fromUid]++;\n    },\n    clearUnreadMessages: (state, action) => {\n      const { uid } = action.payload;\n      state.unreadMessages[uid] = 0;\n    },\n    setIncomingCall: (state, action) => {\n      console.log(\"Setting incoming call:\", action.payload);\n      state.incomingCall = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getUsers.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getUsers.fulfilled, (state, action) => {\n        state.status = \"successful\";\n        state.users = Array.isArray(action.payload) ? action.payload : [];\n      })\n      .addCase(getUsers.rejected, (state, action) => {\n        state.status = \"failed\";\n        console.error(\"Failed to get users:\", action.error.message);\n        state.users = []; // 确保users始终是数组\n      });\n  },\n});\n\n// imSlice actions ************************************************\nexport const {\n  togglerMain,\n  resize,\n  togglerSetting,\n  togglerChat,\n  togglerHelp,\n  incrementzIndex,\n  updateUserStatus,\n  addUnreadMessage,\n  clearUnreadMessages,\n  setIncomingCall,\n} = imSlice.actions;\n\n// imReducer states ************************************************\nexport const showMain = (state) => state.imReducer.showMain;\nexport const showSetting = (state) => state.imReducer.showSetting;\nexport const showChat = (state) => state.imReducer.showChat;\nexport const showHelp = (state) => state.imReducer.showHelp;\nexport const zIndex = (state) => state.imReducer.zIndex;\n\n// imStore states ************************************************\nexport const imStore = configureStore({\n  reducer: {\n    imReducer: imSlice.reducer,\n  },\n});\n\n// imStore.subscribe(() => console.log(imStore.getState()));\n","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imChat.js",["90","91","92","93","94","95","96","97"],[],"import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport WebRTCService from \"../services/webrtc\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useSocket } from \"../contexts/imSocket\";\nimport { addUnreadMessage, setIncomingCall } from \"./imStore\";\nimport { togglerChat, clearUnreadMessages } from \"./imStore\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faXmark,\n  faCompress,\n  faPhone,\n  faPhoneSlash,\n  faVideo,\n  faSmile,\n  faFile,\n  faScissors,\n  faMicrophone,\n  faArrowPointer,\n  faCamera,\n  faEye,\n  faFilm,\n  faQrcode,\n  faRecordVinyl,\n  faMoneyBillTransfer,\n  faPaperPlane,\n  faUser,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { ImDialog } from \"./imCore\";\n\nfunction ImChat(props) {\n  // private state *************************************\n  const [full, setFull] = useState(false);\n  const [hideControl, setHideControl] = useState(false);\n  const [hideLocalVideo, setHideLocalVideo] = useState(false);\n  const [mode, setMode] = useState(1);\n  const [showVideoInvite, setShowVideoInvite] = useState(false);\n  const incomingCall = useSelector((state) => state.imReducer.incomingCall);\n  const webrtcRef = useRef(null);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  const handle = useFullScreenHandle();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // public state *************************************\n  const dispatch = useDispatch();\n  const {\n    socket,\n    connected,\n    sendMessage,\n    sendVideoInvite,\n    sendVideoAccept,\n    sendVideoReject,\n    sendVideoOffer,\n    sendVideoAnswer,\n    sendIceCandidate,\n    sendVideoEnd,\n    getHistoryMessages,\n  } = useSocket();\n  const size = useSelector((rootState) => rootState.imReducer.size);\n  const currentChatUser = useSelector(\n    (rootState) => rootState.imReducer.currentChatUser\n  );\n  let bounds = {\n    left: full ? 0 : size.left,\n    top: full ? 0 : size.top,\n    right: size.right - 170,\n    bottom: size.bottom - 50,\n  };\n\n  // let localVideoref = React.createRef();\n  // let localStream = null;\n\n  const localVideoref = useRef(null);\n  const remoteVideoref = useRef(null);\n\n  const onChange = useCallback((state, handle) => {\n    setFull(state);\n  }, []);\n\n  // component logic *************************************\n  const showControl = () => {\n    return hideControl ? null : (\n      <div className=\"control-panel\">\n        <button\n          id=\"callBtn\"\n          className=\"im-chat-control-btn\"\n          onClick={() => {\n            // 发送结束视频信号给对方\n            if (currentChatUser && currentChatUser.uid) {\n              sendVideoEnd(currentChatUser.uid);\n            }\n            // 本地关闭视频\n            stopVideoCall();\n            setMode(1); // 切换回文字聊天模式\n          }}\n        >\n          <FontAwesomeIcon icon={faPhoneSlash} />\n        </button>\n        <button id=\"muteBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faMicrophone} />\n        </button>\n        <button id=\"closeVideoBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faVideo} />\n        </button>\n        <button id=\"fullScreenBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faArrowPointer} />\n        </button>\n        <button id=\"switchCameraBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faCamera} />\n        </button>\n        <button\n          id=\"hideBtn\"\n          className=\"im-chat-control-btn\"\n          onClick={() => setHideLocalVideo(!hideLocalVideo)}\n        >\n          <FontAwesomeIcon icon={faEye} />\n        </button>\n        <button id=\"screenBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faFilm} />\n        </button>\n        <button id=\"qrBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faQrcode} />\n        </button>\n        <button id=\"boardBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faMoneyBillTransfer} />\n        </button>\n        <button id=\"recordBtn\" className=\"im-chat-control-btn\">\n          <FontAwesomeIcon icon={faRecordVinyl} />\n        </button>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // 初始化WebRTC服务\n    webrtcRef.current = new WebRTCService(socket);\n    webrtcRef.current.onRemoteStream = (stream) => {\n      if (remoteVideoref.current) {\n        remoteVideoref.current.srcObject = stream;\n      }\n    };\n\n    const handleVideoInviteSent = (event) => {\n      const data = event.detail;\n      console.log(\"Video invite sent successfully:\", data);\n      if (data.success) {\n        setShowVideoInvite(true);\n      }\n    };\n\n    const handleVideoInviteFailed = (event) => {\n      const data = event.detail;\n      console.log(\"Video invite failed:\", data);\n      alert(`无法发起视频通话：${data.error}`);\n      setShowVideoInvite(false);\n      stopVideoCall();\n    };\n\n    const handleVideoAccept = async (event) => {\n      const data = event.detail;\n      console.log(\"Video call accepted, starting local stream...\");\n      try {\n        // 启动本地视频流\n        await startVideoCall(true);\n        console.log(\"Local stream started, creating offer...\");\n\n        // 创建并发送 offer\n        const offer = await webrtcRef.current.createOffer();\n        console.log(\"Offer created:\", offer);\n        sendVideoOffer(data.from, offer);\n      } catch (error) {\n        console.error(\"Error in handleVideoAccept:\", error);\n        stopVideoCall();\n      }\n    };\n\n    const handleVideoReject = () => {\n      setShowVideoInvite(false);\n      stopVideoCall();\n    };\n\n    const handleVideoOffer = async (event) => {\n      const data = event.detail;\n      console.log(\"Received video offer:\", data);\n      try {\n        // 启动本地视频流\n        await startVideoCall(false);\n        console.log(\"Local stream started for receiver\");\n\n        // 处理 offer 并创建 answer\n        const answer = await webrtcRef.current.handleOffer(\n          data.offer,\n          data.from\n        );\n        console.log(\"Created answer:\", answer);\n\n        // 发送 answer\n        sendVideoAnswer(data.from, answer);\n      } catch (error) {\n        console.error(\"Error in handleVideoOffer:\", error);\n        stopVideoCall();\n      }\n    };\n\n    const handleVideoAnswer = async (event) => {\n      const data = event.detail;\n      try {\n        await webrtcRef.current.handleAnswer(data.answer);\n      } catch (error) {\n        console.error(\"Error handling video answer:\", error);\n      }\n    };\n\n    const handleIceCandidate = async (event) => {\n      const data = event.detail;\n      try {\n        await webrtcRef.current.handleIceCandidate(data.candidate);\n      } catch (error) {\n        console.error(\"Error handling ICE candidate:\", error);\n      }\n    };\n\n    const handleVideoEnd = () => {\n      stopVideoCall();\n    };\n\n    window.addEventListener(\"video_invite_sent\", handleVideoInviteSent);\n    window.addEventListener(\"video_invite_failed\", handleVideoInviteFailed);\n    window.addEventListener(\"video_accept\", handleVideoAccept);\n    window.addEventListener(\"video_reject\", handleVideoReject);\n    window.addEventListener(\"video_offer\", handleVideoOffer);\n    window.addEventListener(\"video_answer\", handleVideoAnswer);\n    window.addEventListener(\"ice_candidate\", handleIceCandidate);\n    window.addEventListener(\"video_end\", handleVideoEnd);\n\n    return () => {\n      window.removeEventListener(\"video_invite_sent\", handleVideoInviteSent);\n      window.removeEventListener(\n        \"video_invite_failed\",\n        handleVideoInviteFailed\n      );\n      window.removeEventListener(\"video_accept\", handleVideoAccept);\n      window.removeEventListener(\"video_reject\", handleVideoReject);\n      window.removeEventListener(\"video_offer\", handleVideoOffer);\n      window.removeEventListener(\"video_answer\", handleVideoAnswer);\n      window.removeEventListener(\"ice_candidate\", handleIceCandidate);\n      window.removeEventListener(\"video_end\", handleVideoEnd);\n      stopVideoCall();\n    };\n  }, [socket, currentChatUser]);\n\n  const startVideoCall = async (isInitiator) => {\n    try {\n      console.log(\n        \"Starting video call as\",\n        isInitiator ? \"initiator\" : \"receiver\"\n      );\n\n      // 切换到视频模式\n      setMode(2);\n      console.log(\"Switched to video mode\");\n\n      // 等待一下确保视频元素已经渲染\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      // 启动本地视频流\n      await webrtcRef.current.startLocalStream();\n      console.log(\"Local stream started\");\n\n      // 设置本地视频显示\n      if (localVideoref.current) {\n        localVideoref.current.srcObject = webrtcRef.current.localStream;\n        console.log(\"Local video element set up\");\n      } else {\n        console.error(\"Local video element not found\");\n        console.log(\"localVideoref:\", localVideoref);\n      }\n\n      // 创建对等连接\n      await webrtcRef.current.createPeerConnection();\n      console.log(\"Peer connection created\");\n    } catch (error) {\n      console.error(\"Error in startVideoCall:\", error);\n      stopVideoCall();\n      throw error;\n    }\n  };\n\n  const stopVideoCall = () => {\n    console.log(\"开始停止视频通话...\");\n\n    // 立即切换到文字模式，确保UI响应迅速\n    setMode(1);\n\n    const forceStopStream = async (stream) => {\n      if (!stream) return;\n      try {\n        const tracks = stream.getTracks();\n        console.log(`停止 ${tracks.length} 个媒体轨道`);\n\n        // 先禁用所有轨道\n        tracks.forEach((track) => {\n          track.enabled = false;\n          track.muted = true;\n        });\n\n        // 等待一小段时间确保禁用生效\n        await new Promise((resolve) => setTimeout(resolve, 10));\n\n        // 然后停止所有轨道\n        tracks.forEach((track) => {\n          try {\n            track.stop();\n            stream.removeTrack(track);\n            console.log(`成功停止并移除轨道: ${track.kind}`);\n          } catch (err) {\n            console.error(`停止轨道失败: ${track.kind}`, err);\n          }\n        });\n      } catch (err) {\n        console.error(\"停止媒体流失败:\", err);\n      }\n    };\n\n    const cleanup = async () => {\n      try {\n        // 1. 先关闭 WebRTC 连接\n        if (webrtcRef.current) {\n          console.log(\"关闭 WebRTC 连接\");\n          webrtcRef.current.closeConnection();\n\n          if (webrtcRef.current.localStream) {\n            console.log(\"停止 WebRTC 本地流\");\n            await forceStopStream(webrtcRef.current.localStream);\n            webrtcRef.current.localStream = null;\n          }\n        }\n\n        // 2. 停止并清理本地视频\n        if (localVideoref.current && localVideoref.current.srcObject) {\n          console.log(\"清理本地视频元素\");\n          await forceStopStream(localVideoref.current.srcObject);\n          localVideoref.current.srcObject = null;\n          localVideoref.current.load(); // 强制重载视频元素\n        }\n\n        // 3. 停止并清理远程视频\n        if (remoteVideoref.current && remoteVideoref.current.srcObject) {\n          console.log(\"清理远程视频元素\");\n          await forceStopStream(remoteVideoref.current.srcObject);\n          remoteVideoref.current.srcObject = null;\n          remoteVideoref.current.load(); // 强制重载视频元素\n        }\n\n        // 4. 强制释放所有媒体设备\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const videoDevices = devices.filter(\n          (device) => device.kind === \"videoinput\"\n        );\n\n        for (const device of videoDevices) {\n          try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n              video: { deviceId: device.deviceId },\n              audio: false,\n            });\n            await forceStopStream(stream);\n          } catch (err) {\n            console.log(`设备 ${device.label} 已释放`);\n          }\n        }\n\n        // 5. 请求垃圾回收\n        if (window.gc) {\n          window.gc();\n        }\n\n        console.log(\"视频通话停止完成\");\n      } catch (err) {\n        console.error(\"清理过程中出错:\", err);\n      }\n    };\n\n    // 执行清理\n    cleanup();\n  };\n\n  const handleVideoButtonClick = async () => {\n    try {\n      if (!currentChatUser) {\n        console.error(\"No chat user selected\");\n        return;\n      }\n\n      if (mode === 1) {\n        // 发送视频通话邀请\n        sendVideoInvite(currentChatUser.uid);\n        // 预启动本地视频\n        try {\n          await webrtcRef.current.startLocalStream();\n          if (localVideoref.current) {\n            localVideoref.current.srcObject = webrtcRef.current.localStream;\n          }\n        } catch (error) {\n          console.error(\"Error starting local stream:\", error);\n        }\n      } else {\n        // 结束视频通话\n        sendVideoEnd(currentChatUser.uid);\n        stopVideoCall();\n      }\n    } catch (error) {\n      console.error(\"Error in handleVideoButtonClick:\", error);\n    }\n  };\n  // 视频通话接受\n  const handleAcceptCall = async () => {\n    if (!incomingCall) return;\n    sendVideoAccept(incomingCall.from);\n    dispatch(setIncomingCall(null));\n  };\n\n  // 视频通话拒绝\n  const handleRejectCall = () => {\n    if (!incomingCall) return;\n    sendVideoReject(incomingCall.from);\n    dispatch(setIncomingCall(null));\n  };\n\n  // 发送消息\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n\n    if (currentChatUser && currentChatUser.uid) {\n      sendMessage(currentChatUser.uid, message.trim());\n      setMessage(\"\");\n    } else {\n      console.error(\"No valid chat user selected\");\n    }\n  };\n\n  // 接收消息\n  useEffect(() => {\n    const handleMessage = (event) => {\n      const msg = event.detail;\n      // 只显示当前聊天用户的消息\n      if (\n        currentChatUser &&\n        (msg.from?.id === currentChatUser.uid ||\n          msg.account?.id === currentChatUser.uid)\n      ) {\n        setMessages((prev) => [...prev, msg]);\n        scrollToBottom();\n      }\n    };\n\n    if (socket) {\n      window.addEventListener(\"im_message\", handleMessage);\n\n      socket.on(\"history_messages\", (messages) => {\n        console.log(\"Received history messages:\", messages);\n        // 过滤消息，只显示与当前聊天用户相关的消息\n        const filteredMessages = messages.filter(\n          (msg) =>\n            currentChatUser &&\n            (msg.from?.id === currentChatUser.uid ||\n              msg.account?.id === currentChatUser.uid)\n        );\n        setMessages(filteredMessages);\n        scrollToBottom();\n      });\n    }\n    return () => {\n      window.removeEventListener(\"im_message\", handleMessage);\n      if (socket) {\n        socket.off(\"history_messages\");\n      }\n    };\n  }, [socket, currentChatUser]);\n\n  // 当打开聊天窗口时，加载历史消息\n  useEffect(() => {\n    if (socket && currentChatUser) {\n      // 清除未读消息计数\n      dispatch(clearUnreadMessages({ uid: currentChatUser.uid }));\n\n      // 请求历史消息\n      getHistoryMessages(currentChatUser.uid);\n\n      // 清空当前消息列表\n      setMessages([]);\n\n      // 更新全局变量，用于未读消息计数判断\n      window.currentChatUser = currentChatUser;\n    }\n\n    // 组件卸载时清除全局变量\n    return () => {\n      window.currentChatUser = null;\n    };\n  }, [socket, currentChatUser, dispatch]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const showLocalVideo = () => {\n    return hideLocalVideo ? null : (\n      <ImDialog\n        padding={\"0px\"}\n        axis={\"both\"}\n        style={{\n          position: \"absolute\", // 添加绝对定位\n          top: \"20px\", // 距离顶部20px\n          right: \"20px\", // 距离右侧20px\n          width: \"150px\",\n          height: \"150px\",\n          minWidth: \"100px\",\n          minHeight: \"100px\",\n          backgroundColor: \"#000\",\n          borderRadius: \"8px\",\n          overflow: \"hidden\",\n          boxShadow: \"0 4px 8px rgba(0,0,0,0.3)\",\n          resize: \"both\",\n          zIndex: 1000,\n        }}\n        // bounds=\".im-frame\" // 限制拖拽范围在视频聊天窗口内\n      >\n        <video\n          id=\"localVideo\"\n          ref={localVideoref}\n          autoPlay\n          muted\n          playsInline\n          onDoubleClick={swapVideoStreams}\n        ></video>\n        <button\n          className=\"btn-close\"\n          onClick={() => {\n            // 发送结束视频信号给对方\n            if (currentChatUser && currentChatUser.uid) {\n              sendVideoEnd(currentChatUser.uid);\n            }\n            // 本地关闭视频\n            setHideLocalVideo(true);\n            stopVideoCall();\n            setMode(1); // 切换回文字聊天模式\n          }}\n        >\n          <FontAwesomeIcon icon={faXmark} />\n        </button>\n      </ImDialog>\n    );\n  };\n\n  // 交换视频流\n  const swapVideoStreams = () => {\n    if (!localVideoref.current || !remoteVideoref.current) return;\n\n    const localStream = localVideoref.current.srcObject;\n    const remoteStream = remoteVideoref.current.srcObject;\n\n    localVideoref.current.srcObject = remoteStream;\n    remoteVideoref.current.srcObject = localStream;\n  };\n\n  const videoMode = () => {\n    console.log(\"Rendering video mode, localVideoref:\", localVideoref.current);\n    return (\n      <div className=\"im-frame\">\n        <div style={{ position: \"relative\", width: \"100%\", height: \"100%\" }}>\n          {/* 远程视频（大窗口） */}\n          <video\n            id=\"remoteVideo\"\n            ref={remoteVideoref}\n            autoPlay\n            playsInline\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              objectFit: \"cover\",\n              backgroundColor: \"#000\",\n            }}\n            onClick={() => setHideControl(!hideControl)}\n          />\n          {/* 本地视频（小窗口） */}\n          {!hideLocalVideo && showLocalVideo()}\n          {showControl()}\n        </div>\n      </div>\n    );\n  };\n\n  const textMode = () => {\n    return (\n      <div className=\"im-frame\">\n        <div\n          className=\"im-chat\"\n          style={{ flex: 1, padding: \"10px\", overflow: \"auto\" }}\n        >\n          {messages.map((msg, index) => {\n            const currentUid = parseInt(\n              new URLSearchParams(window.location.search).get(\"uId\")\n            );\n            const isMe = msg.from?.id === currentUid;\n            const time = new Date(msg.timestamp).toLocaleString();\n\n            if (\n              index === 0 ||\n              new Date(msg.timestamp).getDate() !==\n                new Date(messages[index - 1].timestamp).getDate()\n            ) {\n              return (\n                <React.Fragment key={index}>\n                  <div className=\"im-chat-time\">{time}</div>\n                  <div className={isMe ? \"me-chat-panel\" : \"you-chat-panel\"}>\n                    {!isMe && (\n                      <button className=\"im-chat-control-btn\">\n                        <FontAwesomeIcon icon={faUser} />\n                      </button>\n                    )}\n                    <div className={isMe ? \"me-chat\" : \"you-chat\"}>\n                      {msg.content}\n                    </div>\n                    {isMe && (\n                      <button className=\"im-chat-control-btn\">\n                        <FontAwesomeIcon icon={faUser} />\n                      </button>\n                    )}\n                  </div>\n                </React.Fragment>\n              );\n            }\n\n            return (\n              <div\n                key={index}\n                className={isMe ? \"me-chat-panel\" : \"you-chat-panel\"}\n              >\n                {!isMe && (\n                  <button className=\"im-chat-control-btn\">\n                    <FontAwesomeIcon icon={faUser} />\n                  </button>\n                )}\n                <div className={isMe ? \"me-chat\" : \"you-chat\"}>\n                  {msg.content}\n                </div>\n                {isMe && (\n                  <button className=\"im-chat-control-btn\">\n                    <FontAwesomeIcon icon={faUser} />\n                  </button>\n                )}\n              </div>\n            );\n          })}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"im-chat\">\n          <div style={{ padding: \"5px\" }}>\n            <button\n              className=\"im-header-button\"\n              onClick={() => dispatch(togglerChat(currentChatUser))}\n              onTouchEnd={() => dispatch(togglerChat(currentChatUser))}\n            >\n              <FontAwesomeIcon icon={faSmile} />\n            </button>\n            <button\n              className=\"im-header-button\"\n              onClick={() => dispatch(togglerChat(currentChatUser))}\n              onTouchEnd={() => dispatch(togglerChat(currentChatUser))}\n            >\n              <FontAwesomeIcon icon={faFile} />\n            </button>\n            <button\n              className=\"im-header-button\"\n              onClick={() => dispatch(togglerChat(currentChatUser))}\n              onTouchEnd={() => dispatch(togglerChat(currentChatUser))}\n            >\n              <FontAwesomeIcon icon={faScissors} />\n            </button>\n            <button\n              className=\"im-header-button\"\n              onClick={() => dispatch(togglerChat())}\n              onTouchEnd={() => dispatch(togglerChat())}\n            >\n              <FontAwesomeIcon icon={faPhone} />\n            </button>\n            <button\n              className=\"im-header-button\"\n              onClick={() => {\n                console.log(\"Video button clicked\");\n                console.log(\"Current chat user:\", currentChatUser);\n                handleVideoButtonClick();\n              }}\n              onTouchEnd={handleVideoButtonClick}\n            >\n              <FontAwesomeIcon icon={faVideo} />\n            </button>\n            <button\n              className=\"im-header-button\"\n              onClick={handleSendMessage}\n              onTouchEnd={handleSendMessage}\n            >\n              <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n          </div>\n          <div>\n            <textarea\n              className=\"im-input\"\n              type=\"text\"\n              placeholder=\"在此输入文本消息，按回车键发送\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === \"Enter\" && !e.shiftKey) {\n                  e.preventDefault();\n                  handleSendMessage();\n                }\n              }}\n              required\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <FullScreen handle={handle} onChange={onChange}>\n      <ImDialog\n        point={{ x: full ? 0 : bounds.left + 230, y: full ? 0 : bounds.top }}\n        bounds={bounds}\n        title={\n          <span className=\"im-header-title\">\n            {currentChatUser?.name || \"聊天\"}\n          </span>\n        }\n        buttons={\n          <div>\n            <button\n              className=\"im-header-button\"\n              onClick={() => {\n                if (!full) {\n                  setFull(true);\n                  handle.enter();\n                } else {\n                  setFull(false);\n                  handle.exit();\n                }\n              }}\n              onTouchEnd={handle.enter}\n            >\n              <FontAwesomeIcon icon={faCompress} />\n            </button>\n            <button\n              className=\"im-header-button\"\n              onClick={() => dispatch(togglerChat(null))}\n              onTouchEnd={() => dispatch(togglerChat(null))}\n            >\n              <FontAwesomeIcon icon={faXmark} />\n            </button>\n          </div>\n        }\n        style={{\n          width: full ? \"100vw\" : 500,\n          height: full ? \"100vh\" : 500,\n          resize: full ? \"none\" : \"both\",\n          minWidth: 400,\n          minHeight: 400,\n        }}\n        axis={full ? \"none\" : \"both\"}\n        cancel={\".im-frame\"}\n      >\n        {mode === 1 ? textMode() : videoMode()}\n      </ImDialog>\n    </FullScreen>\n  );\n}\n\nexport default ImChat;\n","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imThemeContext.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imMain.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imMin.js",["98"],[],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { togglerMain } from \"./imStore\";\nimport classNames from \"classnames\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\nimport { ImDialog } from \"./imCore\";\nimport \"./im.css\";\n\nfunction ImMin() {\n  const { size, zIndex, unreadMessages } = useSelector(\n    (state) => state.imReducer\n  );\n  const hasUnreadMessages = Object.values(unreadMessages).some(\n    (count) => count > 0\n  );\n  const dispatch = useDispatch();\n  const bounds = {\n    left: size.left,\n    top: size.top,\n    right: size.right - 40,\n    bottom: size.bottom - 40,\n  };\n\n  const handleClick = () => {\n    dispatch(togglerMain());\n  };\n\n  return (\n    <ImDialog\n      point={{ x: bounds.left, y: bounds.top }}\n      bounds={bounds}\n      style={{\n        height: 50,\n        width: 50,\n        resize: \"vertical\",\n        borderRadius: 30,\n        minHeight: 50,\n        minWidth: 50,\n      }}\n      padding={\"0px\"}\n      cancel={\"FontAwesomeIcon\"}\n    >\n      <FontAwesomeIcon\n        icon={faComments}\n        onClick={handleClick}\n        onTouchEnd={handleClick}\n        className={classNames(\"im-icon\", { blink: hasUnreadMessages })}\n      />\n    </ImDialog>\n  );\n}\n\nexport default ImMin;\n","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imHelp.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imSetting.js",["99","100","101","102","103","104"],[],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { togglerSetting } from \"./imStore\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faXmark,\n  faFaceAngry,\n  faImage,\n  faFire,\n  faDollar,\n  faPooStorm,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { ImDialog } from \"./imCore\";\nimport { HuePicker } from \"react-color\";\n\nfunction ImSetting() {\n  const dispatch = useDispatch();\n  const size = useSelector((state) => state.imReducer.size);\n  let bounds = {\n    left: size.left,\n    top: size.top,\n    right: size.right - 170,\n    bottom: size.bottom - 50,\n  };\n\n  const CustomPointer = () => {\n    return <div className=\"custom-pointer\" />;\n  };\n\n  const onChangeComplete = (color, event) => {\n    document.body.style.setProperty(\n      \"--im-foreground\",\n      `rgb(${color.rgb.r - 150},${color.rgb.g - 150},${color.rgb.b - 150},${\n        color.rgb.a\n      })`\n    );\n\n    document.body.style.setProperty(\n      \"--im-background\",\n      `linear-gradient(110deg,\n        rgb(${color.rgb.r + 70},${color.rgb.g + 70},${color.rgb.b + 70}),\n        rgb(${color.rgb.r - 70},${color.rgb.g - 70},${color.rgb.b - 70}),\n        rgb(${color.rgb.r + 70},${color.rgb.g + 70},${color.rgb.b + 70})\n      )`\n    );\n\n    document.body.style.setProperty(\n      \"--im-border\",\n      `rgb(${color.rgb.r - 100},${color.rgb.g - 100},${color.rgb.b - 100},${\n        color.rgb.a\n      })`\n    );\n\n    document.body.style.setProperty(\n      \"--im-secondary\",\n      `rgb(${color.rgb.r + 100},${color.rgb.g + 100},${color.rgb.b + 100},${\n        color.rgb.a\n      })`\n    );\n\n    document.body.style.setProperty(\n      \"--im-fore-shadow\",\n      `rgb(${color.rgb.r + 100},${color.rgb.g + 100},${color.rgb.b + 100},${\n        color.rgb.a\n      })`\n    );\n\n    document.body.style.setProperty(\n      \"--im-back-shadow\",\n      `rgb(${color.rgb.r - 100},${color.rgb.g - 100},${color.rgb.b - 100},${\n        color.rgb.a - 0.7\n      })`\n    );\n  };\n\n  return (\n    <ImDialog\n      point={{ x: bounds.left + 330, y: bounds.top + 100 }}\n      bounds={bounds}\n      title={<span className=\"im-header-title\">设置</span>}\n      buttons={\n        <div>\n          <button\n            className=\"im-header-button\"\n            onClick={() => dispatch(togglerSetting())}\n            onTouchEnd={() => dispatch(togglerSetting())}\n          >\n            <FontAwesomeIcon icon={faXmark} />\n          </button>\n        </div>\n      }\n      style={{ width: 500, height: 370, resize: \"none\" }}\n      cancel={\".im-frame\"}\n    >\n      <div className=\"im-frame\">\n        <span className=\"im-child-title\">主题颜色</span>\n        <div className=\"im-set\" style={{ padding: \"10px\" }}>\n          <HuePicker\n            width=\"100%\"\n            // height=\"100%\"\n            color={{ hex: \"#000\" }}\n            // pointer={CustomPointer}\n            // direction={\"horizontal\" || \"vertical\"}\n            onChangeComplete={onChangeComplete}\n          />\n        </div>\n        <span className=\"im-child-title\">初始位置</span>\n        <div className=\"im-set\"></div>\n        <span className=\"im-child-title\">用户来源</span>\n        <div className=\"im-set\"></div>\n        <span className=\"im-child-title\">地址端口</span>\n        <div className=\"im-set\"></div>\n        <span className=\"im-child-title\">快捷按键</span>\n        <div className=\"im-set\"></div>\n        <div className=\"im-frame-foot\">\n          <button className=\"im-button\">保存</button>\n        </div>\n      </div>\n    </ImDialog>\n  );\n}\n\nexport default ImSetting;\n","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imApi.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/imCore.js",["105","106","107","108","109"],[],"import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Draggable from \"react-draggable\";\nimport { incrementzIndex } from \"./imStore\";\nimport { ThemeContext, Themes } from \"./imThemeContext\";\n\nexport function ImDialog(props) {\n  const dispatch = useDispatch();\n  const zIndex = useSelector((state) => state.imReducer.zIndex);\n\n  const nodeRef = useRef(null);\n  useEffect((state) => {\n    dispatch(incrementzIndex());\n    if (!!nodeRef) nodeRef.current.style.zIndex = zIndex;\n  }, []);\n\n  let padding = props.padding || \"15px\";\n\n  const [startPoint, setStartPoint] = useState();\n\n  const themes = useContext(ThemeContext);\n\n  return (\n    <Draggable\n      allowAnyClick={false}\n      enableUserSelectHack={true}\n      nodeRef={nodeRef}\n      scale={1}\n      handle=\".im-handler\"\n      cancel={props.cancel}\n      defaultPosition={props.point}\n      bounds={props.bounds}\n      axis={props.axis}\n      onStart={(e) => {\n        dispatch(incrementzIndex());\n        if (!!nodeRef) nodeRef.current.style.zIndex = zIndex;\n\n        // let beginPoint = e.clientX + \",\" + e.clientY;\n        // setStartPoint(beginPoint);\n        // document.body.style.pointerEvents = \"auto\";\n      }}\n      // onStop={(e) => {\n      //   let stopPoint = e.clientX + \",\" + e.clientY;\n      //   if (startPoint === stopPoint) {\n      //     console.log(\"11111....true\");\n      //     // document.body.style.pointerEvents = \"auto\";\n      //   } else {\n      //     console.log(\"22222....false\");\n      //     // document.body.style.pointerEvents = \"none\";\n      //   }\n      // }}\n    >\n      <div className=\"im-main\" style={props.style} ref={nodeRef}>\n        <div className=\"im-handler\">\n          <div className=\"im-container\" style={{ padding: `0px ${padding}` }}>\n            <div className=\"im-header\">\n              {props.title}\n              {props.buttons}\n            </div>\n            <div className=\"im-content\">{props.children}</div>\n            <div className=\"im-footer\" style={{ height: padding }}></div>\n          </div>\n        </div>\n      </div>\n    </Draggable>\n  );\n}\n","/Users/feng/Work/Project/df/df.im/df.im.client/src/im/VideoInviteContainer.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/im/VideoInviteDialog.js",[],[],"/Users/feng/Work/Project/df/df.im/df.im.client/src/services/webrtc.js",[],[],{"ruleId":"110","severity":1,"message":"111","line":88,"column":6,"nodeType":"112","endLine":88,"endColumn":24,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":5,"column":3,"nodeType":"116","messageId":"117","endLine":5,"endColumn":18},{"ruleId":"114","severity":1,"message":"118","line":6,"column":10,"nodeType":"116","messageId":"117","endLine":6,"endColumn":26},{"ruleId":"114","severity":1,"message":"119","line":37,"column":10,"nodeType":"116","messageId":"117","endLine":37,"endColumn":25},{"ruleId":"114","severity":1,"message":"120","line":53,"column":5,"nodeType":"116","messageId":"117","endLine":53,"endColumn":14},{"ruleId":"114","severity":1,"message":"121","line":60,"column":5,"nodeType":"116","messageId":"117","endLine":60,"endColumn":21},{"ruleId":"110","severity":1,"message":"122","line":257,"column":6,"nodeType":"112","endLine":257,"endColumn":31,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"124","line":424,"column":9,"nodeType":"116","messageId":"117","endLine":424,"endColumn":25},{"ruleId":"114","severity":1,"message":"125","line":431,"column":9,"nodeType":"116","messageId":"117","endLine":431,"endColumn":25},{"ruleId":"110","severity":1,"message":"126","line":508,"column":6,"nodeType":"112","endLine":508,"endColumn":41,"suggestions":"127"},{"ruleId":"114","severity":1,"message":"128","line":11,"column":17,"nodeType":"116","messageId":"117","endLine":11,"endColumn":23},{"ruleId":"114","severity":1,"message":"129","line":7,"column":3,"nodeType":"116","messageId":"117","endLine":7,"endColumn":14},{"ruleId":"114","severity":1,"message":"130","line":8,"column":3,"nodeType":"116","messageId":"117","endLine":8,"endColumn":10},{"ruleId":"114","severity":1,"message":"131","line":9,"column":3,"nodeType":"116","messageId":"117","endLine":9,"endColumn":9},{"ruleId":"114","severity":1,"message":"132","line":10,"column":3,"nodeType":"116","messageId":"117","endLine":10,"endColumn":11},{"ruleId":"114","severity":1,"message":"133","line":11,"column":3,"nodeType":"116","messageId":"117","endLine":11,"endColumn":13},{"ruleId":"114","severity":1,"message":"134","line":26,"column":9,"nodeType":"116","messageId":"117","endLine":26,"endColumn":22},{"ruleId":"114","severity":1,"message":"135","line":5,"column":24,"nodeType":"116","messageId":"117","endLine":5,"endColumn":30},{"ruleId":"110","severity":1,"message":"136","line":15,"column":6,"nodeType":"112","endLine":15,"endColumn":8,"suggestions":"137"},{"ruleId":"114","severity":1,"message":"138","line":19,"column":10,"nodeType":"116","messageId":"117","endLine":19,"endColumn":20},{"ruleId":"114","severity":1,"message":"139","line":19,"column":22,"nodeType":"116","messageId":"117","endLine":19,"endColumn":35},{"ruleId":"114","severity":1,"message":"140","line":21,"column":9,"nodeType":"116","messageId":"117","endLine":21,"endColumn":15},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onKeyDown' and 'reFrame'. Either include them or remove the dependency array.","ArrayExpression",["141"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'addUnreadMessage' is defined but never used.","'showVideoInvite' is assigned a value but never used.","'connected' is assigned a value but never used.","'sendIceCandidate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'sendVideoAnswer', 'sendVideoOffer', and 'startVideoCall'. Either include them or remove the dependency array.",["142"],"'handleAcceptCall' is assigned a value but never used.","'handleRejectCall' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getHistoryMessages'. Either include it or remove the dependency array.",["143"],"'zIndex' is assigned a value but never used.","'faFaceAngry' is defined but never used.","'faImage' is defined but never used.","'faFire' is defined but never used.","'faDollar' is defined but never used.","'faPooStorm' is defined but never used.","'CustomPointer' is assigned a value but never used.","'Themes' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'zIndex'. Either include them or remove the dependency array.",["144"],"'startPoint' is assigned a value but never used.","'setStartPoint' is assigned a value but never used.","'themes' is assigned a value but never used.",{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [socket, dispatch, reFrame, onKeyDown]",{"range":"153","text":"154"},"Update the dependencies array to be: [socket, currentChatUser, startVideoCall, sendVideoOffer, sendVideoAnswer]",{"range":"155","text":"156"},"Update the dependencies array to be: [socket, currentChatUser, dispatch, getHistoryMessages]",{"range":"157","text":"158"},"Update the dependencies array to be: [dispatch, zIndex]",{"range":"159","text":"160"},[2367,2385],"[socket, dispatch, reFrame, onKeyDown]",[8134,8159],"[socket, currentChatUser, startVideoCall, sendVideoOffer, sendVideoAnswer]",[14805,14840],"[socket, currentChatUser, dispatch, getHistoryMessages]",[559,561],"[dispatch, zIndex]"]