{"ast":null,"code":"import _slicedToArray from\"/Users/feng/Work/Project/df/df.im/df.im.client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useContext,useEffect,useState}from\"react\";import{useDispatch}from\"react-redux\";import io from\"socket.io-client\";import{updateUserStatus,addUnreadMessage}from\"../im/imStore\";// 创建socket实例\nimport{jsx as _jsx}from\"react/jsx-runtime\";var protocol=window.location.protocol;var hostname=window.location.hostname;var socket=io(\"\".concat(protocol,\"//\").concat(hostname,\":3000\"),{path:\"/im\",transports:[\"websocket\",\"polling\"],reconnection:true,reconnectionAttempts:Infinity,reconnectionDelay:1000,reconnectionDelayMax:5000,randomizationFactor:0.5,timeout:20000,pingTimeout:60000,pingInterval:25000,secure:true,rejectUnauthorized:false,autoConnect:true,forceNew:false,upgrade:true,rememberUpgrade:true,extraHeaders:{\"Access-Control-Allow-Origin\":\"*\"}});var SocketContext=/*#__PURE__*/createContext();export function SocketProvider(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),connected=_useState2[0],setConnected=_useState2[1];var dispatch=useDispatch();useEffect(function(){if(!socket)return;// 设置事件监听器\nsocket.on(\"connect\",function(){console.log(\"Socket connected\");setConnected(true);// 发送注册消息\nvar urlParams=new URLSearchParams(window.location.search);var uid=parseInt(urlParams.get(\"uId\"));socket.emit(\"register\",{uid:uid});});socket.on(\"disconnect\",function(){console.log(\"Socket disconnected\");setConnected(false);});socket.on(\"error\",function(error){console.error(\"Socket error:\",error);});socket.on(\"connect_error\",function(error){console.error(\"Socket connect error:\",error);});socket.on(\"user_status\",function(data){console.log(\"User status update:\",data);dispatch(updateUserStatus(data));});socket.on(\"initial_user_status\",function(users){console.log(\"Initial user status:\",users);users.forEach(function(user){dispatch(updateUserStatus(user));});});socket.on(\"unread_message\",function(data){console.log(\"Received unread message notification:\",data);// 获取当前聊天用户\nvar currentChatUser=window.currentChatUser;// 只有在未打开与发送者的聊天窗口时，才增加未读消息计数\nif(!currentChatUser||currentChatUser.uid!==data.fromUid){dispatch(addUnreadMessage({fromUid:data.fromUid}));}});// 组件卸载时清理事件监听器\nreturn function(){socket.off(\"connect\");socket.off(\"disconnect\");socket.off(\"error\");socket.off(\"connect_error\");socket.off(\"user_status\");socket.off(\"initial_user_status\");socket.off(\"unread_message\");};},[]);var sendMessage=function sendMessage(toUid,message){if(!socket||!connected){console.error(\"Socket not connected\");return;}var urlParams=new URLSearchParams(window.location.search);var fromUid=parseInt(urlParams.get(\"uId\"));var fromName=urlParams.get(\"uName\");socket.emit(\"message\",{account:{id:toUid},from:{id:fromUid,name:fromName},content:message,timestamp:new Date().toISOString()});};return/*#__PURE__*/_jsx(SocketContext.Provider,{value:{socket:socket,connected:connected,sendMessage:sendMessage},children:children});}export function useSocket(){return useContext(SocketContext);}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useDispatch","io","updateUserStatus","addUnreadMessage","protocol","window","location","hostname","socket","path","transports","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","timeout","pingTimeout","pingInterval","secure","rejectUnauthorized","autoConnect","forceNew","upgrade","rememberUpgrade","extraHeaders","SocketContext","SocketProvider","children","connected","setConnected","dispatch","on","console","log","urlParams","URLSearchParams","search","uid","parseInt","get","emit","error","data","users","forEach","user","currentChatUser","fromUid","off","sendMessage","toUid","message","fromName","account","id","from","name","content","timestamp","Date","toISOString","useSocket"],"sources":["/Users/feng/Work/Project/df/df.im/df.im.client/src/contexts/imSocket.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport io from \"socket.io-client\";\nimport { updateUserStatus, addUnreadMessage } from \"../im/imStore\";\n\n// 创建socket实例\nconst protocol = window.location.protocol;\nconst hostname = window.location.hostname;\nconst socket = io(`${protocol}//${hostname}:3000`, {\n  path: \"/im\",\n  transports: [\"websocket\", \"polling\"],\n  reconnection: true,\n  reconnectionAttempts: Infinity,\n  reconnectionDelay: 1000,\n  reconnectionDelayMax: 5000,\n  randomizationFactor: 0.5,\n  timeout: 20000,\n  pingTimeout: 60000,\n  pingInterval: 25000,\n  secure: true,\n  rejectUnauthorized: false,\n  autoConnect: true,\n  forceNew: false,\n  upgrade: true,\n  rememberUpgrade: true,\n  extraHeaders: {\n    \"Access-Control-Allow-Origin\": \"*\",\n  },\n});\n\nconst SocketContext = createContext();\n\nexport function SocketProvider({ children }) {\n  const [connected, setConnected] = useState(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // 设置事件监听器\n    socket.on(\"connect\", () => {\n      console.log(\"Socket connected\");\n      setConnected(true);\n\n      // 发送注册消息\n      const urlParams = new URLSearchParams(window.location.search);\n      const uid = parseInt(urlParams.get(\"uId\"));\n      socket.emit(\"register\", { uid });\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Socket disconnected\");\n      setConnected(false);\n    });\n\n    socket.on(\"error\", (error) => {\n      console.error(\"Socket error:\", error);\n    });\n\n    socket.on(\"connect_error\", (error) => {\n      console.error(\"Socket connect error:\", error);\n    });\n\n    socket.on(\"user_status\", (data) => {\n      console.log(\"User status update:\", data);\n      dispatch(updateUserStatus(data));\n    });\n\n    socket.on(\"initial_user_status\", (users) => {\n      console.log(\"Initial user status:\", users);\n      users.forEach((user) => {\n        dispatch(updateUserStatus(user));\n      });\n    });\n\n    socket.on(\"unread_message\", (data) => {\n      console.log(\"Received unread message notification:\", data);\n      // 获取当前聊天用户\n      const currentChatUser = window.currentChatUser;\n      // 只有在未打开与发送者的聊天窗口时，才增加未读消息计数\n      if (!currentChatUser || currentChatUser.uid !== data.fromUid) {\n        dispatch(addUnreadMessage({ fromUid: data.fromUid }));\n      }\n    });\n\n    // 组件卸载时清理事件监听器\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"error\");\n      socket.off(\"connect_error\");\n      socket.off(\"user_status\");\n      socket.off(\"initial_user_status\");\n      socket.off(\"unread_message\");\n    };\n  }, []);\n\n  const sendMessage = (toUid, message) => {\n    if (!socket || !connected) {\n      console.error(\"Socket not connected\");\n      return;\n    }\n\n    const urlParams = new URLSearchParams(window.location.search);\n    const fromUid = parseInt(urlParams.get(\"uId\"));\n    const fromName = urlParams.get(\"uName\");\n\n    socket.emit(\"message\", {\n      account: { id: toUid },\n      from: { id: fromUid, name: fromName },\n      content: message,\n      timestamp: new Date().toISOString(),\n    });\n  };\n\n  return (\n    <SocketContext.Provider value={{ socket, connected, sendMessage }}>\n      {children}\n    </SocketContext.Provider>\n  );\n}\n\nexport function useSocket() {\n  return useContext(SocketContext);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}